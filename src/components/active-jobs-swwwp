import React, { Component } from "react";
import { 
    View,
    Text,
    StyleSheet,
    FlatList,
    TouchableHighlight,
    TouchableOpacity
} from "react-native";

import { SwipeListView } from 'react-native-swipe-list-view';

let activeJobs = [
    {
        job: 'Landing Page',
        user: 'Funke Atiba',
        deadline: 'November 19, 2019',
        location: 'Virtual',
        id: "23430",
        timestamp: "2019-11-30T19:33:44.124Z",
        bid: false,
        type: 'job',
        status: 'no bid',
        bidAmount: '',
        image: ''
    },
    {
        job: 'CMS',
        user: 'Austin BÃŸ',
        deadline: 'December 19, 2019',
        location: 'Virtual',
        id: "134545",
        timestamp: "2019-11-28T19:14:44.124Z",
        bid: false,
        type: 'job',
        status: 'bid sent',
        bidAmount: '',
        image: ''
    },
    {
        rating: 'something',
        user: 'Demi T',
        id: "3",
        timestamp: "2019-11-29T19:04:44.124Z",
        reply: false,
        type: 'review',
        title: 'Awesome Job',
        review: 'Frank is very quick and delivered my work exactly to order. Definitely recommend.',
        image: ''
    },
    {
        job: 'Java App developer',
        user: 'Amaka C',
        deadline: 'December 19, 2019',
        location: 'Virtual',
        id: "1",
        timestamp: Date.now(),
        bid: false,
        type: 'accepted bid',
        status: 'job accepted',
        image: ''
    }
]

// const extractItemKey = item => {
//     return item.id.toString();
//   };


function RenderActiveJobs({ title }) {
    return (
        <TouchableHighlight 
            onPress={() => console.log('You touched me')}
            style={styles.rowFront}
            underlayColor={'#FF6602'}
            >
          {/* Image */}
            <Text style={styles.title}>{title}</Text>
        </TouchableHighlight>
    );
  }

  const renderHiddenItem = (data, rowMap) => (
    <View style={styles.rowBack}>
        <TouchableOpacity
            style={[styles.backRightBtn, styles.backRightBtnLeft]}
            onPress={() => closeRow(rowMap, data.item.id)}
        >
            <Text style={styles.backTextWhite}>open</Text>
        </TouchableOpacity>
        <Text>Left</Text>
        <TouchableOpacity
            style={[styles.backRightBtn, styles.backRightBtnLeft]}
            onPress={() => closeRow(rowMap, data.item.id)}
        >
            <Text style={styles.backTextWhite}>Close</Text>
        </TouchableOpacity>
        <TouchableOpacity
            style={[styles.backRightBtn, styles.backRightBtnRight]}
            onPress={() => deleteRow(rowMap, data.item.id)}
        >
            <Text style={styles.backTextWhite}>Delete</Text>
        </TouchableOpacity>
    </View>
);
  
const closeRow = (rowMap, rowKey) => {
    if (rowMap[rowKey]) {
        rowMap[rowKey].closeRow();
    }
};

const deleteRow = (rowMap, rowKey) => {
    closeRow(rowMap, rowKey);
    const newData = [...activeJobs];
    const prevIndex = activeJobs.findIndex(item => item.key === rowKey);
    newData.splice(prevIndex, 1);
    setListData(newData);
};

const onRowDidOpen = rowKey => {
    console.log('This row opened', rowKey);
};

function renderItemSeparator() {
    return <View style={{height: 10}} />;
  }

class ActiveJobs extends Component {
    
    constructor(props){
        super(props);

        this.state = {
            activeJobs: []
        }
    }

    render() {
        return (
            <View style={styles.container}>
                 {/* <FlatList
                    data={activeJobs}
                    renderItem={({ item }) => <RenderActiveJob title={item.job} />}
                    keyExtractor={item => item.id}
                /> */}
                 <SwipeListView
                data={activeJobs}
                renderItem={RenderActiveJobs}
                renderHiddenItem={renderHiddenItem}
                leftOpenValue={175}
                rightOpenValue={-150}
                previewRowKey={'0'}
                previewOpenValue={-40}
                previewOpenDelay={3000}
                onRowDidOpen={onRowDidOpen}
                ItemSeparatorComponent={renderItemSeparator}
            />
            </View>

        );
    }
}
export default ActiveJobs;



const styles = StyleSheet.create({
    container: {
        // flex: 1,
        // alignItems: 'center',
        // justifyContent: 'center',
        backgroundColor: '#fff',
        paddingTop: 15
    },
    temi: {
        fontFamily: 'Helvetica',
        fontSize: 16,
        // color: '#E7A0C7', temiPink
        color: 'rgba(0,0,0,.45)',
        fontWeight: 'bold',
        paddingBottom: 5,
    },
    item: {
        backgroundColor: '#E7A0C7',
        padding: 20,
        // marginVertical: 8,
        // marginHorizontal: 16,
        height: 80,
        flexDirection: "row",
        paddingVertical: 10
      },
      title: {
        fontSize: 32,
        color: "#FF6602"
      },
      rowFront: {
        alignItems: 'center',
        backgroundColor: '#eee',
        justifyContent: 'center',
        height: 50,
    },
    rowBack: {
        alignItems: 'center',
        backgroundColor: '#DDD',
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'space-between',
        paddingLeft: 15,
    },
    backRightBtn: {
        alignItems: 'center',
        bottom: 0,
        justifyContent: 'center',
        position: 'absolute',
        top: 0,
        width: 75,
    },
    backRightBtnLeft: {
        backgroundColor: 'blue',
        right: 75,
    },
    backRightBtnRight: {
        backgroundColor: 'red',
        right: 0,
    },
  
});